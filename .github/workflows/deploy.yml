name: Deploy Static Website to EC2 (Docker)

on:
  push:
    branches:
      - main  # Triggers the workflow when code is pushed to the 'main' branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout Code
        uses: actions/checkout@v2

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Step 3: Build the Docker image
      - name: Build Docker Image
        run: |
          docker build -t my-static-site .  # Build the image using the Dockerfile in root

      # Step 4: Verify Docker image contents
      - name: Verify Docker image contents
        run: |
          docker run --rm my-static-site ls /usr/share/nginx/html

      # Step 5: Save the Docker image to a tar file
      - name: Save Docker image as tar file
        run: |
          mkdir -p $GITHUB_WORKSPACE/docker-images
          docker save my-static-site:latest -o $GITHUB_WORKSPACE/docker-images/my-static-site.tar
          ls -al $GITHUB_WORKSPACE/docker-images

      # Step 6: Verify that the tar file exists
      - name: Verify Docker Image Tar File
        run: |
          if [ ! -f $GITHUB_WORKSPACE/docker-images/my-static-site.tar ]; then
            echo "Docker image tar file not found!"
            exit 1
          fi

      # Step 7: Copy the Docker image tar file to the EC2 instance
      - name: Copy Docker image to EC2 instance
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "$GITHUB_WORKSPACE/docker-images/my-static-site.tar"
          target: "/home/ubuntu/docker-images/my-static-site.tar"
          timeout: 30s
          command_timeout: 10m
          debug: true

      # Step 8: SSH into EC2 and deploy the Docker container
      - name: SSH to EC2 and deploy Docker container
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            cd /home/ubuntu/docker-images
            docker load -i my-static-site.tar
            docker stop my-static-site-container || true
            docker rm my-static-site-container || true
            docker run -d -p 80:80 --name my-static-site-container my-static-site:latest
